C51 COMPILER V9.60.0.0   MAIN                                                              04/20/2025 18:08:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Headers;.\sources) DEBUG OBJECTEXT
                    -END PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Headers/bmp.h"
   3          #include "Headers/oled.h"
   4          #include "Headers/oledfont.h"
   5          #include "Headers/RTX51TNY.H>
   6          
   7          sbit KEY1 = P3 ^ 1;
   8          sbit KEY2 = P3 ^ 0;
   9          sbit KEY3 = P3 ^ 2;
  10          sbit KEY4 = P3 ^ 3;
  11          
  12          // 游戏状态变量
  13          volatile unsigned char game_state = 0;          // 0: 主菜单，1: 游戏进行中
  14          volatile unsigned char setting_state = 0;       // 0: 主菜单，1: 设置界面
  15          volatile unsigned char score_state = 0;         // 0: 主菜单，1: 最高分界面
  16          volatile unsigned char board_num = 1;           // 1: start 2: setting 3: score
  17          
  18          // 初始化任务
  19          void task_init(void) _task_ 0
  20          {
  21   1          P2 = 0xFF;
  22   1          OLED_Init();
  23   1          OLED_DrawBMP(0, 0, 128, 8, BMP1);
  24   1          os_wait(K_IVL, 50, 0);
  25   1      
  26   1          os_create_task(1);  // 按键任务（优先级1）
  27   1          os_create_task(2);  // 菜单任务（优先级2）
  28   1          os_create_task(3);  // 游戏任务（优先级3）
  29   1          os_create_task(4);  // 积分任务（优先级4）
  30   1          os_create_task(5);  // 设置任务（优先级5）
  31   1      
  32   1          os_delete_task(0);  // 删除自身
  33   1          while (1);  // 修复2：阻止任务重生
  34   1      }
  35          
  36          // 按键任务
  37          void task_key(void) _task_ 1
  38          {
  39   1          while(1)
  40   1          {
  41   2              /*主菜单中
  42   2              * key1 = up
  43   2              * key2 = down
  44   2              * key3 = comfirm
  45   2              */
  46   2              if (game_state == 0 && setting_state == 0 && score_state == 0)
  47   2              {
  48   3                  if (KEY1 == 0)
  49   3                  {
  50   4                      os_wait(K_IVL, 3, 0); // 消抖
  51   4                      if (KEY1 == 0)         //等待按键释放
  52   4                      {
  53   5                          os_wait(K_IVL, 10, 0); // 消抖
  54   5                          EA = 0;
C51 COMPILER V9.60.0.0   MAIN                                                              04/20/2025 18:08:44 PAGE 2   

  55   5                          board_num--;       //向上
  56   5                          EA = 1;
  57   5                          if(board_num < 1)
  58   5                              board_num = 3; //越界循环
  59   5                          while (KEY1 == 0) os_wait(K_IVL, 1, 0); // 等待释放
  60   5                      }
  61   4                      
  62   4                  }
  63   3                  
  64   3                  if (KEY2 == 0)
  65   3                  {
  66   4                      os_wait(K_IVL, 10, 0); // 消抖
  67   4                      while(KEY2 == 0);         //等待按键释放
  68   4                      os_wait(K_IVL, 10, 0); // 消抖
  69   4                      EA = 0;
  70   4                      board_num++;        //向下
  71   4                      EA = 1;
  72   4                      if(board_num > 3)
  73   4                          board_num = 1;//越界循环
  74   4                      while (KEY2 == 0) os_wait(K_IVL, 1, 0);
  75   4                  }
  76   3                  
  77   3                  if (KEY3 == 0)
  78   3                  {
  79   4                      os_wait(K_IVL, 10, 0); // 消抖
  80   4                      while (KEY3 == 0);         //等待按键释放
  81   4                      os_wait(K_IVL, 10, 0); // 消抖  
  82   4                      switch (board_num)
  83   4                      {
  84   5                      //game选项下按下确认按键
  85   5                      case 1:
  86   5                          game_state = 1;
  87   5                          break;
  88   5                      
  89   5                      //setting选项下按下确认按键
  90   5                      case 2:
  91   5                          setting_state = 1;
  92   5                          break;
  93   5      
  94   5                      //score选项下按下确认按钮
  95   5                      case 3:
  96   5                          score_state = 1;
  97   5                          break;
  98   5                      }
  99   4                      while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 100   4                  }
 101   3                  os_wait(K_IVL, 10, 0);      //释放内存
 102   3                  
 103   3                  //主菜单下不需要按键4
 104   3              }
 105   2              /*游戏中
 106   2              * key1, key2 = sky
 107   2              * key3, key4 = ground
 108   2              */
 109   2              if (game_state == 1)
 110   2              {
 111   3          
 112   3              }
 113   2              /*设置中
 114   2              * key1 = plus
 115   2              * key2 = less
 116   2              * key3 = comfirm
C51 COMPILER V9.60.0.0   MAIN                                                              04/20/2025 18:08:44 PAGE 3   

 117   2              * key4 = back
 118   2              */
 119   2              if (setting_state == 1)
 120   2              {
 121   3      
 122   3              }
 123   2              /*计分板中
 124   2              * key4 = back
 125   2              */
 126   2              if (score_state == 1)
 127   2              {
 128   3      
 129   3              }
 130   2          }
 131   1      }
 132          
 133          // 菜单任务
 134          void task_board(void) _task_ 2
 135          {
 136   1          P2 = 0xAA;
 137   1          OLED_Clear();
 138   1          while (1)
 139   1          {
 140   2              while (game_state == 0 && score_state == 0 && setting_state == 0)
 141   2              { 
 142   3                  OLED_ShowString(25, 0, "Start", 16);
 143   3                  OLED_ShowString(25, 3, "Setting", 16);
 144   3                  OLED_ShowString(25, 6, "Score", 16);
 145   3                  switch (board_num)
 146   3                  {
 147   4                  case 1: 
 148   4                      OLED_ShowString(3, 0, ">>", 16);
 149   4                      OLED_ShowString(3, 3, "  ", 16);
 150   4                      OLED_ShowString(3, 6, "  ", 16);
 151   4                      break;
 152   4      
 153   4                  case 2: 
 154   4                      OLED_ShowString(3, 0, "  ", 16);
 155   4                      OLED_ShowString(3, 3, ">>", 16);
 156   4                      OLED_ShowString(3, 6, "  ", 16);
 157   4                      break;
 158   4      
 159   4                  case 3: 
 160   4                      OLED_ShowString(3, 0, "  ", 16);
 161   4                      OLED_ShowString(3, 3, "  ", 16);
 162   4                      OLED_ShowString(3, 6, ">>", 16);
 163   4                      break;
 164   4                  }
 165   3                  os_wait(K_IVL, 10, 0);  // 优化刷新率
 166   3              }
 167   2          }
 168   1      }
 169          
 170          // 游戏任务
 171          void task_game(void) _task_ 3
 172          {
 173   1          while (1)  // 修复5：使用永久循环
 174   1          {
 175   2              if (game_state == 1)
 176   2              {
 177   3                  OLED_Clear();
 178   3                  P2 = 0x01;
C51 COMPILER V9.60.0.0   MAIN                                                              04/20/2025 18:08:44 PAGE 4   

 179   3                  // 添加游戏逻辑
 180   3                  OLED_ShowString(3, 3, "gamestate now", 16); 
 181   3                  os_wait(K_TMO, 300, 0);
 182   3                  OLED_Clear();
 183   3                  game_state = 0;
 184   3              }
 185   2              else
 186   2              {
 187   3                  os_wait(K_IVL, 100, 0);
 188   3              }
 189   2          }
 190   1      }
 191          
 192          // 积分任务
 193          void task_score(void) _task_ 4
 194          {
 195   1          while (1)
 196   1          {
 197   2              if (score_state == 1)
 198   2              {
 199   3                  OLED_Clear();
 200   3                  P2 = 0x02;
 201   3                  // 添加积分显示逻辑
 202   3                  OLED_ShowString(3, 3, "scorestate now", 16); 
 203   3                  os_wait(K_TMO, 300, 0);
 204   3                  OLED_Clear();
 205   3                  score_state = 0;
 206   3              }
 207   2              else
 208   2              {
 209   3                  os_wait(K_IVL, 100, 0);
 210   3              }
 211   2          }
 212   1      }
 213          
 214          // 设置任务
 215          void task_setting(void) _task_ 5
 216          {
 217   1          while (1)
 218   1          {
 219   2              if (setting_state == 1)
 220   2              {
 221   3                  OLED_Clear();
 222   3                  P2 = 0x03;
 223   3                  // 添加设置显示逻辑
 224   3                  OLED_ShowString(3, 3, "settingstate now", 16);
 225   3                  os_wait(K_TMO, 300, 0);
 226   3                  OLED_Clear();
 227   3                  setting_state = 0;
 228   3              }
 229   2              else
 230   2              {
 231   3                  os_wait(K_IVL, 100, 0);
 232   3              }
 233   2          }
 234   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    687    ----
   CONSTANT SIZE    =   1096    ----
   XDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   MAIN                                                              04/20/2025 18:08:44 PAGE 5   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
