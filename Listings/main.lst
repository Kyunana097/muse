C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\keil5\C51\BIN\C51.EXE main.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Headers;.\sources) DEBUG OB
                    -JECTEXTEND PRINT(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "Headers/oled.h"
   3          #include "Headers/oledfont.h"
   4          #include "Headers/RTX51TNY.H"
   5          #include "Headers/music.h"
   6          #include "Headers/note.h"
   7          
   8          sbit KEY1 = P3 ^ 1;
   9          sbit KEY2 = P3 ^ 0;
  10          sbit KEY3 = P3 ^ 2;
  11          sbit KEY4 = P3 ^ 3;
  12          
  13          // 游戏状态变量
  14          bit game_state = 0;          // 0: 主菜单，1: 游戏进行中
  15          bit setting_state = 0;       // 0: 主菜单，1: 设置界面
  16          bit info_state = 0;          // 0: 主菜单，1: 制作信息界面
  17          bit isPlaying = 0;           // 0: 没有正在游玩的游戏 1; 正在游戏中
  18          bit musicPlaying = 0;        // 0: 不播放 1: 播放
  19          
  20          bit key1_pressed = 0;
  21          bit key2_pressed = 0;
  22          bit key3_pressed = 0;
  23          bit key4_pressed = 0;
  24          
  25          volatile unsigned short track1_score = 0;
  26          volatile unsigned short track2_score = 0;
  27          volatile unsigned short temp_score = 0;
  28          volatile unsigned char track_num = 1;           // 1: 第一关，2: 第二关
  29          volatile unsigned char board_num = 1;           // 1: start 2: setting 3: info
  30          volatile unsigned char x_position = 119;        //音符起始位置 119+8=127
  31          volatile unsigned char speed = 4;               //音符移动速度 1-8
  32          
  33          
  34          unsigned char result;
  35          
  36          // 初始化任务
  37          void task_init(void) _task_ 0
  38          {
  39   1          P2 = 0xFF;
  40   1          OLED_Init();
  41   1          OLED_Clear();
  42   1          os_wait(K_IVL, 50, 0);
  43   1      
  44   1          //显示菜单教程
  45   1          OLED_ShowString(3, 0, "QG Dash v2.9", 8);
  46   1          OLED_ShowString(3, 2, "Key1:up", 8);
  47   1          OLED_ShowString(3, 3, "Key2:down", 8);
  48   1          OLED_ShowString(3, 4, "Key3:comfirm", 8);
  49   1          OLED_ShowString(3, 6, "Loading...", 8);
  50   1          
  51   1          os_wait(K_IVL, 1000, 0);
  52   1          OLED_ShowString(3, 6, "Welcome!  ", 8);
  53   1          os_wait(K_IVL, 100, 0);
  54   1      
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 2   

  55   1          os_create_task(1);  // 按键任务（优先级1）
  56   1          os_create_task(2);  // 菜单任务（优先级2）
  57   1          //os_create_task(3);  // 游戏任务（优先级3）
  58   1          //os_create_task(4);  // 积分任务（优先级4）
  59   1          //os_create_task(5);  // 设置任务（优先级5）
  60   1          //os_create_task(6);  // 音乐任务（优先级6）
  61   1      
  62   1          os_delete_task(0);  // 删除自身
  63   1      }
  64          
  65          // 按键与判定任务
  66          void task_key(void) _task_ 1
  67          {
  68   1          while(1)
  69   1          {
  70   2              /*主菜单中
  71   2              * key1 = up
  72   2              * key2 = down
  73   2              * key3 = comfirm
  74   2              */
  75   2              if (game_state == 0 && setting_state == 0 && info_state == 0)
  76   2              {
  77   3                  if (KEY1 == 0)
  78   3                  {
  79   4                      os_wait(K_IVL, 3, 0); // 消抖
  80   4                      if (KEY1 == 0)         //确认按钮按下
  81   4                      {
  82   5                          os_wait(K_IVL, 10, 0); // 消抖
  83   5                          board_num--;       //向上
  84   5                          if(board_num < 1)
  85   5                              board_num = 3; //越界循环
  86   5                          while (KEY1 == 0) os_wait(K_IVL, 1, 0); // 等待释放
  87   5                      }
  88   4                  }
  89   3                  
  90   3                  if (KEY2 == 0)
  91   3                  {
  92   4                      os_wait(K_IVL, 3, 0); // 消抖
  93   4                      if (KEY2 == 0)         //确认按钮按下
  94   4                      {
  95   5                          os_wait(K_IVL, 10, 0); // 消抖
  96   5                          board_num++;        //向下
  97   5                          if(board_num > 3)
  98   5                              board_num = 1;//越界循环
  99   5                          while (KEY2 == 0) os_wait(K_IVL, 1, 0);// 等待释放
 100   5                      }
 101   4                     
 102   4                  }
 103   3                  
 104   3                  if (KEY3 == 0)
 105   3                  {
 106   4                      os_wait(K_IVL, 3, 0); // 消抖
 107   4                      if (KEY3 == 0)         //等待按键释放
 108   4                      {
 109   5                          os_wait(K_IVL, 10, 0); // 消抖  
 110   5                          switch (board_num)
 111   5                          {
 112   6                          //game选项下按下确认按键
 113   6                          case 1:
 114   6                              //进入游戏二级菜单
 115   6                              game_state = 1;
 116   6                              break;
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 3   

 117   6                      
 118   6                          //setting选项下按下确认按键
 119   6                          case 2:
 120   6                              setting_state = 1;
 121   6                              os_delete_task(2);  //挂起菜单
 122   6                              os_create_task(5);  //启动设置任务（优先级5）
 123   6                              break;
 124   6      
 125   6                          //info选项下按下确认按钮
 126   6                          case 3:
 127   6                              //进入info二级菜单
 128   6                              info_state = 1;
 129   6                              break;
 130   6                          }
 131   5                          while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 132   5                      }
 133   4                      
 134   4                  }
 135   3                  os_wait(K_IVL, 10, 0);      //释放内存
 136   3              }
 137   2              /**游戏二级菜单中
 138   2               * key 1 = up
 139   2               * key 2 = down
 140   2               * key 3 = comfirm
 141   2               * key 4 = back
 142   2               */
 143   2              if (game_state == 1 && isPlaying == 0)
 144   2              {
 145   3                  if (KEY1 == 0)
 146   3                  {
 147   4                      os_wait(K_IVL, 3, 0); // 消抖
 148   4                      if (KEY1 == 0)         //确认按钮按下
 149   4                      {
 150   5                          os_wait(K_IVL, 10, 0); // 消抖
 151   5                          track_num--;       //向上
 152   5                          if (track_num < 1)
 153   5                              track_num = 2; //越界循环
 154   5                          while (KEY1 == 0) os_wait(K_IVL, 1, 0); // 等待释放
 155   5                      }
 156   4                  }
 157   3      
 158   3                  if (KEY2 == 0)
 159   3                  {
 160   4                      os_wait(K_IVL, 3, 0); // 消抖
 161   4                      if (KEY2 == 0)         //确认按钮按下
 162   4                      {
 163   5                          os_wait(K_IVL, 10, 0); // 消抖
 164   5                          track_num++;        //向下
 165   5                          if (track_num > 2)
 166   5                              track_num = 1;//越界循环
 167   5                          while (KEY2 == 0) os_wait(K_IVL, 1, 0);// 等待释放
 168   5                      }
 169   4      
 170   4                  }
 171   3      
 172   3                  if (KEY3 == 0)
 173   3                  {
 174   4                      os_wait(K_IVL, 3, 0); // 消抖
 175   4                      if (KEY3 == 0)         //等待按键释放
 176   4                      {
 177   5                          os_wait(K_IVL, 10, 0); // 消抖  
 178   5                          //激活当前停留的轨道
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 4   

 179   5                          isPlaying = 1;
 180   5                          while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 181   5                      }
 182   4                      os_delete_task(2);  //挂起菜单
 183   4                      os_create_task(3);  //启动游戏任务（优先级3）
 184   4                  }
 185   3      
 186   3                  //返回上级菜单
 187   3                  if (KEY4 == 0)
 188   3                  {
 189   4                      os_wait(K_IVL, 3, 0); // 消抖
 190   4                      if (KEY4 == 0)
 191   4                      {
 192   5                          os_wait(K_IVL, 10, 0); // 消抖  
 193   5                          while (KEY4 == 0) os_wait(K_IVL, 1, 0);
 194   5                      }
 195   4                      game_state = 0;
 196   4                      os_wait(K_IVL, 3, 0);
 197   4                  }
 198   3                  os_wait(K_IVL, 10, 0);      //释放内存
 199   3              } 
 200   2      
 201   2              /**制作信息二级菜单中
 202   2               * key 3 = quit
 203   2               */
 204   2              if (info_state == 1)
 205   2              {
 206   3                  //退出二级菜单
 207   3                  if (KEY3 == 0)
 208   3                  {
 209   4                      os_wait(K_IVL, 3, 0); // 消抖
 210   4                      if (KEY3 == 0);        
 211   4                      {
 212   5                          os_wait(K_IVL, 10, 0); // 消抖  
 213   5                          while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 214   5                      }
 215   4                      os_wait(K_IVL, 100, 0);
 216   4                      info_state = 0;
 217   4                  }
 218   3              }
 219   2      
 220   2              /*游戏中
 221   2              * key1 = sky
 222   2              * key2 = ground
 223   2              * key3 = quit
 224   2              * key4 = pause（暂时不写）
 225   2              */
 226   2              if (game_state == 1 && isPlaying == 1)
 227   2              {
 228   3      
 229   3                  //退出游戏
 230   3                  if (KEY3 == 0)
 231   3                  {
 232   4                      os_wait(K_IVL, 3, 0); // 消抖
 233   4                      if (KEY3 == 0)
 234   4                      {
 235   5                          os_wait(K_IVL, 10, 0); // 消抖  
 236   5                          while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 237   5                      }
 238   4                      OLED_Clear();
 239   4                      isPlaying = 0;
 240   4                      os_wait(K_IVL, 100, 0);
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 5   

 241   4                  }
 242   3      
 243   3              }
 244   2      
 245   2              /*设置中
 246   2              * key1 = speed plus
 247   2              * key2 = speed less
 248   2              * key3 = comfirm & quit
 249   2              * key4 = tap
 250   2              */
 251   2              if (setting_state == 1)
 252   2              {
 253   3                  //speed减少
 254   3                  if (KEY1 == 0)
 255   3                  {
 256   4                      os_wait(K_IVL, 3, 0); // 消抖
 257   4                      if (KEY1 == 0)
 258   4                      {
 259   5                          os_wait(K_IVL, 10, 0); // 消抖
 260   5                          speed--;       //speed减少
 261   5                          if (speed < 2)
 262   5                              speed = 1; //越界循环
 263   5                          while (KEY1 == 0) os_wait(K_IVL, 1, 0); // 等待释放
 264   5      
 265   5                      }
 266   4                      
 267   4                  }
 268   3      
 269   3                  //speed增加
 270   3                  if (KEY2 == 0)
 271   3                  {
 272   4                      os_wait(K_IVL, 3, 0); // 消抖
 273   4                      if (KEY2 == 0)         
 274   4                      {
 275   5                          os_wait(K_IVL, 10, 0); // 消抖
 276   5                          speed++;        //speed增加
 277   5                          if (speed > 7)
 278   5                              speed = 8;//越界循环
 279   5                          while (KEY2 == 0) os_wait(K_IVL, 1, 0);
 280   5      
 281   5                      }
 282   4                  }
 283   3      
 284   3                  //退出设置
 285   3                  if (KEY3 == 0)
 286   3                  {
 287   4                      os_wait(K_IVL, 3, 0); // 消抖
 288   4                      if (KEY3 == 0)         
 289   4                      {
 290   5                          os_wait(K_IVL, 10, 0); // 消抖  
 291   5                          while (KEY3 == 0) os_wait(K_IVL, 1, 0);
 292   5                      }
 293   4                      setting_state = 0;
 294   4                      os_wait(K_IVL, 3, 0);
 295   4                  }
 296   3      
 297   3                  //判定
 298   3                  if (KEY4 == 0)
 299   3                  {
 300   4                      os_wait(K_IVL, 3, 0); // 消抖
 301   4                      if (KEY4 == 0)
 302   4                      {
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 6   

 303   5                          os_wait(K_IVL, 10, 0); // 消抖  
 304   5                          while (KEY4 == 0) os_wait(K_IVL, 1, 0); 
 305   5                          key4_pressed = 1;
 306   5                      }
 307   4                      os_wait(K_IVL, 3, 0);
 308   4                  }
 309   3      
 310   3                  os_wait(K_IVL, 10, 0);      //释放内存
 311   3                  
 312   3              }
 313   2             
 314   2          }
 315   1      }
 316          
 317          // 菜单任务
 318          void task_board(void) _task_ 2
 319          {
 320   1          OLED_Clear();
 321   1          while (1)
 322   1          {  
 323   2              os_wait(K_IVL, 10, 0);
 324   2              P2 = 0xAA;
 325   2              //主菜单
 326   2              while (game_state == 0 && setting_state == 0 && info_state == 0)
 327   2              {
 328   3                  OLED_ShowString(25, 0, "Start", 16);
 329   3                  OLED_ShowString(25, 3, "Setting", 16);
 330   3                  OLED_ShowString(25, 6, "Info", 16);
 331   3                  switch (board_num)
 332   3                  {
 333   4                  case 1: 
 334   4                      OLED_ShowString(3, 0, ">>", 16);
 335   4                      OLED_ShowString(3, 3, "  ", 16);
 336   4                      OLED_ShowString(3, 6, "  ", 16);
 337   4                      break;
 338   4      
 339   4                  case 2: 
 340   4                      OLED_ShowString(3, 0, "  ", 16);
 341   4                      OLED_ShowString(3, 3, ">>", 16);
 342   4                      OLED_ShowString(3, 6, "  ", 16);
 343   4                      break;
 344   4      
 345   4                  case 3: 
 346   4                      OLED_ShowString(3, 0, "  ", 16);
 347   4                      OLED_ShowString(3, 3, "  ", 16);
 348   4                      OLED_ShowString(3, 6, ">>", 16);
 349   4                      break;
 350   4                  }
 351   3                  os_wait(K_IVL, 10, 0);  
 352   3              }
 353   2      
 354   2              //游戏二级菜单
 355   2              if (game_state == 1 && isPlaying == 0)
 356   2              {
 357   3                  OLED_Clear();
 358   3                  OLED_ShowString(3, 1, "Key1:up", 8);
 359   3                  OLED_ShowString(3, 2, "Key2:down", 8);
 360   3                  OLED_ShowString(3, 3, "Key3:comfirm", 8);
 361   3                  OLED_ShowString(3, 4, "Key4:back", 8);
 362   3                  OLED_ShowString(3, 6, "Loading...", 8);
 363   3                  os_wait(K_IVL, 1000, 0);
 364   3                  OLED_ShowString(3, 6, "          ", 8);
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 7   

 365   3                  OLED_Clear();
 366   3                  while (game_state == 1 && isPlaying == 0 )
 367   3                  {
 368   4                      OLED_ShowString(25, 0, "Track 1", 16);
 369   4                      OLED_ShowString(25, 3, "Track 2", 16);
 370   4                      OLED_ShowString(3, 6, "top:", 8);
 371   4                      switch (track_num)
 372   4                      {
 373   5                      case 1:
 374   5                          OLED_ShowString(3, 0, ">>", 16);
 375   5                          OLED_ShowString(3, 3, "  ", 16);
 376   5                          OLED_ShowValue(40, 6, track1_score, 8);
 377   5                          break;
 378   5      
 379   5                      case 2:
 380   5                          OLED_ShowString(3, 0, "  ", 16);
 381   5                          OLED_ShowString(3, 3, ">>", 16);
 382   5                          OLED_ShowValue(40, 6, track2_score, 8);
 383   5                          break;
 384   5                      }
 385   4                  }
 386   3                  OLED_Clear();
 387   3                  os_wait(K_IVL, 100, 0);
 388   3              }
 389   2              
 390   2              //制作信息二级菜单
 391   2              if (info_state == 1)
 392   2              {
 393   3                  OLED_Clear();
 394   3                  while (info_state == 1)
 395   3                  {
 396   4                      OLED_ShowString(3, 0, "Auth:Kyunana", 16);
 397   4                      OLED_ShowString(3, 3, "25/4/2025", 8);
 398   4                      OLED_ShowString(3, 4, "in AT89C52RC", 8);
 399   4                      OLED_ShowString(3, 5, "V2.9", 8);
 400   4                      OLED_ShowString(3, 6, "press 3 to quit", 16);
 401   4                      os_wait(K_IVL, 1000, 0);
 402   4                  }
 403   3                  OLED_Clear();
 404   3                  os_wait(K_IVL, 10, 0);
 405   3              }
 406   2          }
 407   1      }
 408          
 409          // 游戏任务
 410          void task_game(void) _task_ 3
 411          {
 412   1          while (1)  
 413   1          {
 414   2              if (game_state == 1)
 415   2              {
 416   3                  isPlaying = 1;
 417   3                  OLED_Clear();
 418   3                  P2 = 0x01;
 419   3                  OLED_ShowString(3, 3, "Loading...", 16);
 420   3                  os_create_task(4);  //激活积分
 421   3                  os_create_task(6);  //激活播放器
 422   3                  //曲目选择
 423   3                  if (track_num == 1)
 424   3                      Music_Init(Track1);
 425   3                  else Music_Init(Track2);
 426   3      
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 8   

 427   3                  //Track1
 428   3                  while (game_state == 1 && track_num == 1 && isPlaying == 1)
 429   3                  {
 430   4                      OLED_Clear();
 431   4                      OLED_ShowString(3, 3, "Track1 now", 16);
 432   4                      OLED_ShowString(3, 6, "Loading...", 8);
 433   4                      musicPlaying = 1;
 434   4                      while (musicPlaying == 1)
 435   4                      {
 436   5                          os_wait(K_IVL, 100, 0);
 437   5      
 438   5                      }
 439   4                      OLED_Clear();
 440   4      
 441   4                      OLED_ShowString(3, 0, "game end", 16);
 442   4                      OLED_ShowString(3, 3, "your score", 16);
 443   4                      OLED_ShowValue(3, 6, track1_score, 16);
 444   4                      os_wait(K_IVL, 2000, 0);  
 445   4                      // 退出游戏状态
 446   4                      isPlaying = 0;
 447   4                      // 确保积分任务已完成处理
 448   4                      os_wait(K_IVL, 100, 0);
 449   4                  }
 450   3      
 451   3                  //Track2
 452   3                  while (game_state == 1 && track_num == 2 && isPlaying == 1)
 453   3                  {
 454   4                      OLED_Clear();
 455   4                      OLED_ShowString(3, 3, "Track2 now", 16);
 456   4                      OLED_ShowString(3, 6, "Loading...", 8);
 457   4                      musicPlaying = 1; 
 458   4                      while (musicPlaying == 1)
 459   4                      {
 460   5                          os_wait(K_IVL, 100, 0);
 461   5      
 462   5                      }
 463   4                      OLED_Clear(); 
 464   4      
 465   4                      OLED_ShowString(3, 0, "game end", 16);
 466   4                      OLED_ShowString(3, 3, "your score", 16);
 467   4                      OLED_ShowValue(3, 6, track2_score, 16);
 468   4                      os_wait(K_IVL, 2000, 0);
 469   4                      // 退出游戏状态
 470   4                      isPlaying = 0;
 471   4                      // 确保积分任务已完成处理
 472   4                      os_wait(K_IVL, 100, 0);
 473   4                  }
 474   3      
 475   3                  //此处添加玩家游戏后结算选择界面（回到主菜单或继续选歌）
 476   3      
 477   3                  //game_state == 0后 进入退出步骤
 478   3                  OLED_Clear();
 479   3                  os_wait(K_IVL, 100, 0);
 480   3                  game_state = 0;
 481   3      
 482   3                  os_create_task(2);  //激活菜单
 483   3                  os_delete_task(3);  //挂起游戏
 484   3              }
 485   2              else
 486   2              {
 487   3                  os_wait(K_IVL, 100, 0);
 488   3              }
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 9   

 489   2          }
 490   1      }
 491          
 492          // 积分任务
 493          void task_score(void) _task_ 4
 494          {
 495   1          while (1)
 496   1          {
 497   2              if (game_state == 1 && isPlaying == 1)
 498   2              {
 499   3                  temp_score = 1000;
 500   3                  os_wait(K_IVL, 10, 0);  // 适当延时
 501   3          }
 502   2          else
 503   2          {
 504   3            // 游戏结束时保存分数
 505   3            if (game_state == 1 && isPlaying == 0 && temp_score > 0)
 506   3            {
 507   4              if (track_num == 1)
 508   4              {
 509   5                  if (temp_score > track1_score)
 510   5                      track1_score = temp_score;
 511   5              }
 512   4              else if (track_num == 2)
 513   4              {
 514   5                  if (temp_score > track2_score)
 515   5                      track2_score = temp_score;
 516   5              }
 517   4              temp_score = 0;  // 重置临时分数
 518   4              os_wait(K_IVL, 100, 0);
 519   4            }
 520   3            os_wait(K_IVL, 100, 0);  // 非游戏状态时降低CPU占用
 521   3          }
 522   2          }
 523   1         
 524   1      }
 525          
 526          // 设置任务
 527          void task_setting(void) _task_ 5
 528          {
 529   1          while (1)
 530   1          {
 531   2              if (setting_state == 1)
 532   2              {
 533   3                  OLED_Init(); 
 534   3                  OLED_Clear();
 535   3                  os_wait(K_IVL, 10, 0);
 536   3                  P2 = 0x03;
 537   3                  x_position = 121 - speed * 2;
 538   3                  while(setting_state == 1)
 539   3                  {
 540   4                      os_wait(K_IVL, 1, 0);
 541   4                      OLED_ShowString(3, 3, "speed:", 16);
 542   4                      os_wait(K_IVL, 1, 0);
 543   4                      
 544   4                      // 传递字符串指针给 OLED_ShowString
 545   4                      OLED_ShowValue(60, 3, speed, 16); 
 546   4                      OLED_ShowString(16, 0, "$", 16);//判定点
 547   4                      note_spawn(speed, 1); 
 548   4                      if (key4_pressed == 1)
 549   4                      {
 550   5                          result = check_note_hit(speed, 1);
C51 COMPILER V9.60.0.0   MAIN                                                              04/25/2025 20:17:53 PAGE 10  

 551   5                          if (result != NOTE_MISS)
 552   5                          {
 553   6                              OLED_ShowString(3, 6, HitResults[result], 8); // 显示判定
 554   6                              key4_pressed = 0;
 555   6                          }
 556   5                          os_wait(K_IVL, 1, 0);
 557   5                      }
 558   4                  }
 559   3                      
 560   3      
 561   3                  //setting_state == 0后 进入退出步骤
 562   3                  os_wait(K_IVL, 100, 0);
 563   3                  OLED_Clear();
 564   3                  os_create_task(2);  //激活菜单
 565   3                  os_delete_task(5);  //挂起设置
 566   3              }
 567   2              else
 568   2              {
 569   3                  os_wait(K_IVL, 100, 0);
 570   3              }
 571   2          }
 572   1      }
 573          
 574          void task_music(void) _task_ 6
 575          {
 576   1          while (1)
 577   1          {
 578   2              if (musicPlaying)
 579   2              {
 580   3                  Music_PlayFullTrack();
 581   3                  musicPlaying = 0;
 582   3              }
 583   2              os_wait(K_IVL, 10, 0);
 584   2          }
 585   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2576    ----
   CONSTANT SIZE    =    241    ----
   XDATA SIZE       =     11    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      9    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
