C51 COMPILER V9.60.0.0   OLED                                                              04/29/2025 11:26:35 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OLED
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE sources\oled.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Headers;.\sources) D
                    -EBUG OBJECTEXTEND PRINT(.\Listings\oled.lst) OBJECT(.\Objects\oled.obj)

line level    source

   1          #include "OLED.h"
   2          #include "IIC.h"
   3          #include "oledfont.h" // 包含字体数据
   4          
   5          // 写入一个字节到OLED
   6          void Write_IIC_Byte(unsigned char IIC_Byte) {
   7   1          unsigned char i, m, da;
   8   1          da = IIC_Byte;
   9   1          OLED_SCL = 0;
  10   1          for (i = 0; i < 8; i++) {
  11   2              m = da & 0x80;
  12   2              if (m == 0x80) {
  13   3                  OLED_SDIN = 1;
  14   3              }
  15   2              else {
  16   3                  OLED_SDIN = 0;
  17   3              }
  18   2              da = da << 1;
  19   2              OLED_SCL = 1;
  20   2              OLED_SCL = 0;
  21   2          }
  22   1      }
  23          
  24          // 写入命令到OLED
  25          void Write_IIC_Command(unsigned char IIC_Command) {
  26   1          I2cStart();
  27   1          Write_IIC_Byte(0x78); // 从机地址
  28   1          I2cReadACK();
  29   1          Write_IIC_Byte(0x00); // 写命令
  30   1          I2cReadACK();
  31   1          Write_IIC_Byte(IIC_Command);
  32   1          I2cReadACK();
  33   1          I2cStop();
  34   1      }
  35          
  36          // 写入数据到OLED
  37          void Write_IIC_Data(unsigned char IIC_Data) {
  38   1          I2cStart();
  39   1          Write_IIC_Byte(0x78); // 从机地址
  40   1          I2cReadACK();
  41   1          Write_IIC_Byte(0x40); // 写数据
  42   1          I2cReadACK();
  43   1          Write_IIC_Byte(IIC_Data);
  44   1          I2cReadACK();
  45   1          I2cStop();
  46   1      }
  47          
  48          // 写入字节到OLED
  49          void OLED_WR_Byte(unsigned dat, unsigned cmd) {
  50   1          if (cmd) {
  51   2              Write_IIC_Data(dat);
  52   2          }
  53   1          else {
  54   2              Write_IIC_Command(dat);
C51 COMPILER V9.60.0.0   OLED                                                              04/29/2025 11:26:35 PAGE 2   

  55   2          }
  56   1      }
  57          
  58          // 初始化OLED
  59          void OLED_Init(void) {
  60   1          OLED_WR_Byte(0xAE, OLED_CMD); // 关闭显示
  61   1          OLED_WR_Byte(0x00, OLED_CMD); // 设置低列地址
  62   1          OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
  63   1          OLED_WR_Byte(0x40, OLED_CMD); // 设置起始行地址
  64   1          OLED_WR_Byte(0xB0, OLED_CMD); // 设置页地址
  65   1          OLED_WR_Byte(0x81, OLED_CMD); // 设置对比度
  66   1          OLED_WR_Byte(0xFF, OLED_CMD); // 对比度值
  67   1          OLED_WR_Byte(0xA1, OLED_CMD); // 设置段重映射
  68   1          OLED_WR_Byte(0xA6, OLED_CMD); // 设置正常显示
  69   1          OLED_WR_Byte(0xA8, OLED_CMD); // 设置多路复用比
  70   1          OLED_WR_Byte(0x3F, OLED_CMD); // 设置1/32占空比
  71   1          OLED_WR_Byte(0xC8, OLED_CMD); // 设置COM扫描方向
  72   1          OLED_WR_Byte(0xD3, OLED_CMD); // 设置显示偏移
  73   1          OLED_WR_Byte(0x00, OLED_CMD); // 偏移值
  74   1          OLED_WR_Byte(0xD5, OLED_CMD); // 设置振荡器分频
  75   1          OLED_WR_Byte(0x80, OLED_CMD); // 分频值
  76   1          OLED_WR_Byte(0xD8, OLED_CMD); // 关闭区域颜色模式
  77   1          OLED_WR_Byte(0x05, OLED_CMD); // 设置预充电周期
  78   1          OLED_WR_Byte(0xD9, OLED_CMD); // 设置预充电周期
  79   1          OLED_WR_Byte(0xF1, OLED_CMD); // 预充电周期值
  80   1          OLED_WR_Byte(0xDA, OLED_CMD); // 设置COM引脚配置
  81   1          OLED_WR_Byte(0x12, OLED_CMD); // 引脚配置值
  82   1          OLED_WR_Byte(0xDB, OLED_CMD); // 设置Vcomh
  83   1          OLED_WR_Byte(0x30, OLED_CMD); // Vcomh值
  84   1          OLED_WR_Byte(0x8D, OLED_CMD); // 设置电荷泵
  85   1          OLED_WR_Byte(0x14, OLED_CMD); // 电荷泵值
  86   1          OLED_WR_Byte(0xAF, OLED_CMD); // 打开显示
  87   1      }
  88          
  89          // 清屏
  90          void OLED_Clear(void) {
  91   1          u8 i, n;
  92   1          for (i = 0; i < 8; i++) {
  93   2              OLED_WR_Byte(0xB0 + i, OLED_CMD); // 设置页地址
  94   2              OLED_WR_Byte(0x00, OLED_CMD); // 设置低列地址
  95   2              OLED_WR_Byte(0x10, OLED_CMD); // 设置高列地址
  96   2              for (n = 0; n < 128; n++) {
  97   3                  OLED_WR_Byte(0x00, OLED_DATA); // 写入空白数据
  98   3              }
  99   2          }
 100   1      }
 101          
 102          // 设置显示位置
 103          void OLED_Set_Pos(u8 x, u8 y) {
 104   1          OLED_WR_Byte(0xB0 + y, OLED_CMD); // 设置页地址
 105   1          OLED_WR_Byte(((x & 0xF0) >> 4) | 0x10, OLED_CMD); // 设置高列地址
 106   1          OLED_WR_Byte((x & 0x0F), OLED_CMD); // 设置低列地址
 107   1      }
 108          
 109          // 显示一个字符
 110          void OLED_ShowChar(u8 x, u8 y, u8 chr, u8 Char_Size) {
 111   1          u8 c = chr - ' '; // 获取偏移后的字符
 112   1          u8 i;
 113   1          if (x > 120) {
 114   2              x = 0;
 115   2              y += 2;
 116   2          }
C51 COMPILER V9.60.0.0   OLED                                                              04/29/2025 11:26:35 PAGE 3   

 117   1          if (Char_Size == 16) {
 118   2              OLED_Set_Pos(x, y);
 119   2              for (i = 0; i < 8; i++) {
 120   3                  OLED_WR_Byte(F8X16[c * 16 + i], OLED_DATA);
 121   3              }
 122   2              OLED_Set_Pos(x, y + 1);
 123   2              for (i = 0; i < 8; i++) {
 124   3                  OLED_WR_Byte(F8X16[c * 16 + i + 8], OLED_DATA);
 125   3              }
 126   2          }
 127   1          else {
 128   2              OLED_Set_Pos(x, y);
 129   2              for (i = 0; i < 6; i++) {
 130   3                  OLED_WR_Byte(F6x8[c][i], OLED_DATA);
 131   3              }
 132   2          }
 133   1      }
 134          
 135          // 显示字符串
 136          void OLED_ShowString(u8 x, u8 y, u8* p, u8 Char_Size) {
 137   1          u8 j = 0;
 138   1          while (p[j] != '\0') {
 139   2              OLED_ShowChar(x, y, p[j], Char_Size);
 140   2              x += 8;
 141   2              if (x > 120) {
 142   3                  x = 0;
 143   3                  y += 2;
 144   3              }
 145   2              j++;
 146   2          }
 147   1      }
 148          
 149          // 显示数值
 150          void OLED_ShowValue(u8 x, u8 y, u32 value, u8 size) {
 151   1          u8 i = 0;
 152   1          char buffer[5]; // 存储数值的字符串表示
 153   1          buffer[0] = (value / 1000) + '0'; // 千位
 154   1          buffer[1] = ((value / 100) % 10) + '0'; // 百位
 155   1          buffer[2] = ((value / 10) % 10) + '0'; // 十位
 156   1          buffer[3] = (value % 10) + '0'; // 个位
 157   1          buffer[4] = '\0'; // 字符串结束符
 158   1      
 159   1          // 跳过前导零
 160   1          while (i < 3 && buffer[i] == '0') {
 161   2              i++;
 162   2          }
 163   1      
 164   1          // 显示字符串
 165   1          OLED_ShowString(x, y, (u8*)&buffer[i], size);
 166   1      }
 167          
 168          // 滚动屏幕
 169          void OLED_roll(void) {
 170   1          OLED_WR_Byte(0x2E, OLED_CMD); // 关闭滚动
 171   1          OLED_WR_Byte(0x27, OLED_CMD); // 水平向左滚动
 172   1          OLED_WR_Byte(0x00, OLED_CMD); // 虚拟字节
 173   1          OLED_WR_Byte(0x00, OLED_CMD); // 起始页
 174   1          OLED_WR_Byte(0x05, OLED_CMD); // 滚动时间间隔
 175   1          OLED_WR_Byte(0x01, OLED_CMD); // 终止页
 176   1          OLED_WR_Byte(0x00, OLED_CMD); // 虚拟字节
 177   1          OLED_WR_Byte(0x7F, OLED_CMD); // 虚拟字节
 178   1          OLED_WR_Byte(0x2F, OLED_CMD); // 开启滚动
C51 COMPILER V9.60.0.0   OLED                                                              04/29/2025 11:26:35 PAGE 4   

 179   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1155    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      30
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
